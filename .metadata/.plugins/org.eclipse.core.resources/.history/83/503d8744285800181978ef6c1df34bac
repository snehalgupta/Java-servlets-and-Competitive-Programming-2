import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.*;


public class ProbL {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Reader.init(System.in);    
	    try{ 
	    	String s = Reader.next();
	    	String cur = new String();
	    	int q=Reader.nextInt();
	    	int[][] mat = new int[200000][26];
	        calc(mat,s,s.length());
	    	for(int i=0;i<q;i++) {
	    		String[] f=Reader.next().split(" ");
	    		if(f[0].equals("push")) {
	    			cur.concat(f[1]);
	    		}
	    		else if(f[0].equals("pop")) {
	    			cur = cur.substring(0,cur.length()-1);
	    		}
	    		boolean ans = query(mat,cur,s.length());
	    		System.out.println(ans);
	    	}
	    } catch (IOException e) {
			e.printStackTrace();
		}
	}
	static void calc(int mat[][], String str, int len)
    {
        for (int i = 0; i < 26; ++i)
            mat[len][i] = len;
        for (int i = len-1; i >= 0; --i)
        {
            for (int j = 0; j < 26; ++j)
                mat[i][j] = mat[i+1][j];
            mat[i][str.charAt(i)-'a'] = i;
        }
    }
	static boolean query(int mat[][], String str, int len)
    {
        int pos = 0;
        for (int i = 0; i < str.length(); ++i)
        {
            if (mat[pos][str.charAt(i) - 'a'] >= len)
                return false;
            else
                pos = mat[pos][str.charAt(i) - 'a'] + 1;
        }
        return true;
    }
}

/** Class for buffered reading int and double values */
class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                     new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                   reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }
	
    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
}
